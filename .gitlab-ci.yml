stages:
  - prepare
  - build
  - release

variables:
  CARGO_HOME: $CI_PROJECT_DIR/cargo
  RUSTUP_HOME: $CI_PROJECT_DIR/rustup
  NODE_VERSION: "20"  # Use Node.js version compatible with your project

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - $CARGO_HOME
    - $RUSTUP_HOME
    - node_modules/
    - src-tauri/target/

# Install dependencies
setup:
  stage: prepare
  image: node:$NODE_VERSION
  before_script:
    - apt-get update -y && apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libayatana-appindicator3-dev
    - npm install -g pnpm
    - pnpm install
    - curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain stable
    - source "$CI_PROJECT_DIR/cargo/env"
    - rustup target add x86_64-pc-windows-gnu
    - rustup target add x86_64-apple-darwin
    - rustup target add aarch64-apple-darwin
    - cargo install tauri-cli
  script:
    - echo "Dependencies installed"
  tags:
    - docker

# Build for Linux
build_linux:
  stage: build
  image: node:$NODE_VERSION
  before_script:
    - source "$CI_PROJECT_DIR/cargo/env"
  script:
    - pnpm tauri build --target x86_64-unknown-linux-gnu
  artifacts:
    paths:
      - src-tauri/target/release/
      - src-tauri/target/x86_64-unknown-linux-gnu/release/
    expire_in: 1 week
  tags:
    - docker

# Build for Windows
build_windows:
  stage: build
  image: node:$NODE_VERSION
  before_script:
    - apt-get update -y && apt-get install -y mingw-w64
    - source "$CI_PROJECT_DIR/cargo/env"
    - rustup target add x86_64-pc-windows-gnu
  script:
    - pnpm tauri build --target x86_64-pc-windows-gnu
  artifacts:
    paths:
      - src-tauri/target/x86_64-pc-windows-gnu/release/
    expire_in: 1 week
  tags:
    - docker

# Build for macOS (Intel)
build_macos_intel:
  stage: build
  image: node:$NODE_VERSION
  before_script:
    - source "$CI_PROJECT_DIR/cargo/env"
    - rustup target add x86_64-apple-darwin
  script:
    - pnpm tauri build --target x86_64-apple-darwin
  artifacts:
    paths:
      - src-tauri/target/x86_64-apple-darwin/release/
    expire_in: 1 week
  tags:
    - docker

# Build for macOS (ARM/M1)
build_macos_arm:
  stage: build
  image: node:$NODE_VERSION
  before_script:
    - source "$CI_PROJECT_DIR/cargo/env"
    - rustup target add aarch64-apple-darwin
  script:
    - pnpm tauri build --target aarch64-apple-darwin
  artifacts:
    paths:
      - src-tauri/target/aarch64-apple-darwin/release/
    expire_in: 1 week
  tags:
    - docker

# Create release and upload artifacts
create_release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  needs:
    - build_linux
    - build_windows
    - build_macos_intel
    - build_macos_arm
  script:
    - |
      RELEASE_ASSETS=""
      if [ -f "src-tauri/target/x86_64-unknown-linux-gnu/release/bundle/deb/*.deb" ]; then
        RELEASE_ASSETS="${RELEASE_ASSETS} src-tauri/target/x86_64-unknown-linux-gnu/release/bundle/deb/*.deb"
      fi
      if [ -f "src-tauri/target/x86_64-unknown-linux-gnu/release/bundle/appimage/*.AppImage" ]; then
        RELEASE_ASSETS="${RELEASE_ASSETS} src-tauri/target/x86_64-unknown-linux-gnu/release/bundle/appimage/*.AppImage"
      fi
      if [ -f "src-tauri/target/x86_64-pc-windows-gnu/release/bundle/msi/*.msi" ]; then
        RELEASE_ASSETS="${RELEASE_ASSETS} src-tauri/target/x86_64-pc-windows-gnu/release/bundle/msi/*.msi"
      fi
      if [ -f "src-tauri/target/x86_64-apple-darwin/release/bundle/dmg/*.dmg" ]; then
        RELEASE_ASSETS="${RELEASE_ASSETS} src-tauri/target/x86_64-apple-darwin/release/bundle/dmg/*.dmg"
      fi
      if [ -f "src-tauri/target/aarch64-apple-darwin/release/bundle/dmg/*.dmg" ]; then
        RELEASE_ASSETS="${RELEASE_ASSETS} src-tauri/target/aarch64-apple-darwin/release/bundle/dmg/*.dmg"
      fi
      
      release-cli create --name "Release $CI_COMMIT_TAG" --tag-name $CI_COMMIT_TAG --assets $RELEASE_ASSETS
  rules:
    - if: $CI_COMMIT_TAG
  tags:
    - docker