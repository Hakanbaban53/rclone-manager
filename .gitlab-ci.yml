stages:
  - prepare
  - build
  - release

variables:
  CARGO_HOME: "$CI_PROJECT_DIR/cargo"
  RUSTUP_HOME: "$CI_PROJECT_DIR/rustup"
  NODE_VERSION: "20"

cache:
  key: "$CI_JOB_NAME"
  paths:
    - $CARGO_HOME
    - $RUSTUP_HOME
    - node_modules/
    - src-tauri/target/

setup:
  stage: prepare
  image: node:$NODE_VERSION
  before_script:
    - apt-get update -y && apt-get install -y 
        libgtk-3-dev 
        libwebkit2gtk-4.0-dev 
        libayatana-appindicator3-dev
        gcc-aarch64-linux-gnu
    - npm install -g npm@latest
    - npm install
    - curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain stable
    - export PATH="$CARGO_HOME/bin:$PATH"
    - rustup target add x86_64-pc-windows-gnu
    - rustup target add x86_64-apple-darwin
    - rustup target add aarch64-apple-darwin
    - rustup target add x86_64-unknown-linux-gnu
    - rustup target add aarch64-unknown-linux-gnu
    - cargo install --locked tauri-cli
  script:
    - echo "Dependencies installed"
  tags:
    - docker

# Linux x86_64 build
build_linux_x86_64:
  stage: build
  image: node:$NODE_VERSION
  before_script:
    - export PATH="$CARGO_HOME/bin:$PATH"
  script:
    - npm run tauri build -- --target x86_64-unknown-linux-gnu
  artifacts:
    paths:
      - src-tauri/target/x86_64-unknown-linux-gnu/release/
    expire_in: 1 week
  tags:
    - docker

# Linux aarch64 build
build_linux_aarch64:
  stage: build
  image: node:$NODE_VERSION
  before_script:
    - apt-get update -y && apt-get install -y gcc-aarch64-linux-gnu
    - export PATH="$CARGO_HOME/bin:$PATH"
  script:
    - export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc
    - npm run tauri build -- --target aarch64-unknown-linux-gnu
  artifacts:
    paths:
      - src-tauri/target/aarch64-unknown-linux-gnu/release/
    expire_in: 1 week
  tags:
    - docker

# Windows build
build_windows:
  stage: build
  image: node:$NODE_VERSION
  before_script:
    - apt-get update -y && apt-get install -y mingw-w64
    - export PATH="$CARGO_HOME/bin:$PATH"
  script:
    - npm run tauri build -- --target x86_64-pc-windows-gnu
  artifacts:
    paths:
      - src-tauri/target/x86_64-pc-windows-gnu/release/
    expire_in: 1 week
  tags:
    - docker

# Uncomment below if you have a macOS runner:
# build_macos_intel:
#   stage: build
#   tags: [macos]
#   script:
#     - npm run tauri build -- --target x86_64-apple-darwin
#   artifacts:
#     paths:
#       - src-tauri/target/x86_64-apple-darwin/release/
#     expire_in: 1 week

# build_macos_arm:
#   stage: build
#   tags: [macos]
#   script:
#     - npm run tauri build -- --target aarch64-apple-darwin
#   artifacts:
#     paths:
#       - src-tauri/target/aarch64-apple-darwin/release/
#     expire_in: 1 week

create_release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  needs:
    - build_linux_x86_64
    - build_linux_aarch64
    - build_windows
    # - build_macos_intel
    # - build_macos_arm
  script:
    - |
      RELEASE_ASSETS=""
      for pattern in \
        src-tauri/target/x86_64-unknown-linux-gnu/release/bundle/deb/*.deb \
        src-tauri/target/x86_64-unknown-linux-gnu/release/bundle/rpm/*.rpm \
        src-tauri/target/x86_64-unknown-linux-gnu/release/bundle/appimage/*.AppImage \
        src-tauri/target/aarch64-unknown-linux-gnu/release/bundle/deb/*.deb \
        src-tauri/target/aarch64-unknown-linux-gnu/release/bundle/rpm/*.rpm \
        src-tauri/target/aarch64-unknown-linux-gnu/release/bundle/appimage/*.AppImage \
        # src-tauri/target/x86_64-pc-windows-gnu/release/bundle/msi/*.msi \
        src-tauri/target/x86_64-pc-windows-gnu/release/bundle/nsis/*.exe \
        # src-tauri/target/x86_64-apple-darwin/release/bundle/dmg/*.dmg \
        # src-tauri/target/aarch64-apple-darwin/release/bundle/dmg/*.dmg; do
        for file in $pattern; do
          [ -e "$file" ] && RELEASE_ASSETS="$RELEASE_ASSETS $file"
        done
      done
      release-cli create --name "Release $CI_COMMIT_TAG" --tag-name $CI_COMMIT_TAG --assets "$RELEASE_ASSETS"
  rules:
    - if: $CI_COMMIT_TAG
  tags:
    - docker
